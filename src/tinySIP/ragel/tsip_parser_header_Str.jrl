/*
* Copyright (C) 2012 Doubango Telecom <http://www.doubango.org>
*
* Contact: Mamadou Diop <diopmamadou(at)doubango[dot]org>
*	
* This file is part of Open Source sipML5 solution <http://www.sipml5.org>
*
* sipML5 is free software: you can redistribute it and/or modify
* it under the terms of the GNU General Public License as publishd by
* the Free Software Foundation, either version 3 of the License, or
* (at your option) any later version.
*	
* sipML5 is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*	
* You should have received a copy of the GNU General Public License
* along with sipML5.
*/

// Parse headers: 'Call-ID', 'Event', 'P-Access-Network-Info', 'Server', 'SIP-ETag', 'SIP-If-Match', 'User-Agent'
tsip_header_Str.prototype = Object.create(tsip_header.prototype);
tsip_header_Call_ID.prototype = Object.create(tsip_header_Str.prototype);
tsip_header_Event.prototype = Object.create(tsip_header_Str.prototype);
tsip_header_P_Access_Network_Info.prototype = Object.create(tsip_header_Str.prototype);
tsip_header_Server.prototype = Object.create(tsip_header_Str.prototype);
tsip_header_SIP_ETag.prototype = Object.create(tsip_header_Str.prototype);
tsip_header_SIP_If_Match.prototype = Object.create(tsip_header_Str.prototype);
tsip_header_User_Agent.prototype = Object.create(tsip_header_Str.prototype);

%%{
	machine tsip_machine_parser_header_Str;

	# Includes
	include tsip_machine_utils "./tsip_machine_utils.jrl";
	
	action tag{
		i_tag_start = p;
	}

	action is_Call_ID { o_hdr = new  tsip_header_Call_ID(); }
	action is_Event { o_hdr = new  tsip_header_Event(); }
	action is_PANI { o_hdr = new tsip_header_P_Access_Network_Info(); }
	action is_Server { o_hdr = new tsip_header_Server(); }
	action is_SIP_ETag { o_hdr = new tsip_header_SIP_ETag(); }
	action is_SIP_If_Match { o_hdr = new tsip_header_SIP_If_Match(); }
	action is_User_Agent { o_hdr = new tsip_header_User_Agent(); }
	
	action parse_value{
		if(o_hdr){
			o_hdr.s_value = tsk_ragel_parser_get_string(s_str, p, i_tag_start);
		}
	}

	action parse_param{
		if(o_hdr){
			tsk_ragel_add_param(s_str, p, i_tag_start, o_hdr.ao_params);
		}
	}

	action eob{ }

	Str =	(
				( "Call-ID"i | "i"i )%is_Call_ID |
				( "Event"i | "o"i )%is_Event |
				("P-Access-Network-Info"i)%is_PANI |
				("Server"i)%is_Server |
				("SIP-ETag"i)%is_SIP_ETag |
				("SIP-If-Match"i)%is_SIP_If_Match |
				("User-Agent"i)%is_User_Agent
			)
			 HCOLON (((js_any - SEMI) - COMMA)*)>tag %parse_value ( (SEMI | COMMA) generic_param>tag %parse_param )*;
	
	# Entry point
	main := Str :>CRLF @eob;

}%%

%%write data;

function tsip_header_Str(e_type, s_value){
	tsip_header.call(this, e_type);
    this.s_value = s_value;
}

tsip_header_Str.prototype.toString = function(){
    return this.s_value;
};

tsip_header_Str.prototype.Parse = function(s_str){
    var cs = 0;
	var p = 0;
	var pe = s_str.length;
	var eof = pe;
	var data = tsk_buff_str2ib(s_str);
	var i_tag_start;	
	var o_hdr = null;
	
	%%write init;
	%%write exec;
	
	if( cs < %%{ write first_final; }%% ){
		tsk_utils_log_error("Failed to parse header: " + s_str);
		return null;
	}
	
	return o_hdr;
}

function tsip_header_Call_ID(s_value){ tsip_header_Str.call(this, tsip_header_type_e.Call_ID, s_value); }
function tsip_header_Event(s_value){ tsip_header_Str.call(this, tsip_header_type_e.Event, s_value); }
function tsip_header_P_Access_Network_Info(s_value){ tsip_header_Str.call(this, tsip_header_type_e.P_Access_Network_Info, s_value); }
function tsip_header_Server(s_value){ tsip_header_Str.call(this, tsip_header_type_e.Server, s_value); }
function tsip_header_SIP_ETag(s_value){ tsip_header_Str.call(this, tsip_header_type_e.SIP_ETag, s_value); }
function tsip_header_SIP_If_Match(s_value){ tsip_header_Str.call(this, tsip_header_type_e.SIP_If_Match, s_value); }
function tsip_header_User_Agent(s_value){ tsip_header_Str.call(this, tsip_header_type_e.User_Agent, s_value); }